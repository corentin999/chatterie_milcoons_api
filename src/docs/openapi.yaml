openapi: 3.0.3
info:
  title: Cattery API
  version: 1.0.0
  description: Minimal API for cattery site (cats, photos, auth). Admin endpoints require JWT.

servers:
  - url: http://localhost:8080

tags:
  - name: Auth
  - name: Cats
  - name: Photos
  - name: Health

paths:
  /healthz:
    get:
      summary: Health check
      tags: [Health]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }

  /auth/login:
    post:
      summary: Login and get JWT
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string, example: admin }
                password: { type: string, example: admin123 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user:
                    $ref: "#/components/schemas/UserSafe"
        "401": { description: Invalid credentials }

  /auth/me:
    get:
      summary: Check session
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated: { type: boolean }
                  user:
                    $ref: "#/components/schemas/UserSafe"

  /auth/change-password:
    post:
      summary: Change current user's password
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword: { type: string, example: old_pw }
                newPassword: { type: string, example: new_pw_strong }
      responses:
        "200": { description: Password updated }
        "401": { description: Unauthorized }
        "404": { description: User not found }

  /cats:
    get:
      summary: List cats (public, paginated)
      tags: [Cats]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: sort
          description: "Format: field:asc|desc (e.g. createdAt:desc, name:asc)"
          schema: { type: string, default: createdAt:desc }
        - in: query
          name: type
          schema: { type: string, enum: [breeder, kitten] }
        - in: query
          name: status
          schema: { type: string, enum: [available, reserved, sold] }
        - in: query
          name: gender
          schema: { type: string, enum: [male, female] }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      page: { type: integer }
                      limit: { type: integer }
                      total: { type: integer }
                      totalPages: { type: integer }
                      sort: { type: string }
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/Cat" }
    post:
      summary: Create cat (admin)
      tags: [Cats]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CatCreate" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Cat" }

  /cats/{id}:
    get:
      summary: Get one cat (public)
      tags: [Cats]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Cat" }
        "404": { description: Not found }
    put:
      summary: Update cat (admin)
      tags: [Cats]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CatUpdate" }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    delete:
      summary: Delete cat (admin)
      tags: [Cats]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Deleted }
        "404": { description: Not found }

  /photos:
    get:
      summary: List photos (public, paginated)
      tags: [Photos]
      parameters:
        - in: query
          name: catId
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: sort
          schema: { type: string, default: position:asc }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      page: { type: integer }
                      limit: { type: integer }
                      total: { type: integer }
                      totalPages: { type: integer }
                      sort: { type: string }
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/Photo" }

  /photos/upload:
    post:
      summary: Upload one image (admin)
      tags: [Photos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [catId, file]
              properties:
                catId: { type: integer }
                cover: { type: boolean }
                position: { type: integer }
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }

  /photos/{id}:
    patch:
      summary: Update photo (admin)
      tags: [Photos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PhotoUpdate" }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    delete:
      summary: Delete photo (admin)
      tags: [Photos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Deleted }
        "404": { description: Not found }

  /photos/{id}/set-cover:
    post:
      summary: Set photo as cover (admin)
      tags: [Photos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: OK }
        "404": { description: Not found }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserSafe:
      type: object
      properties:
        id: { type: integer }
        username: { type: string }
        role: { type: string, enum: [admin, editor] }

    Cat:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        gender: { type: string, enum: [male, female] }
        birthDate: { type: string, format: date, nullable: true }
        status: { type: string, enum: [available, reserved, sold] }
        type: { type: string, enum: [breeder, kitten] }
        fatherId: { type: integer, nullable: true }
        motherId: { type: integer, nullable: true }
        sireName: { type: string, nullable: true }
        damName: { type: string, nullable: true }
        sireRegistration: { type: string, nullable: true }
        damRegistration: { type: string, nullable: true }
        Photos:
          type: array
          items: { $ref: "#/components/schemas/Photo" }

    CatCreate:
      allOf:
        - $ref: "#/components/schemas/Cat"
      required: [name, gender, type]
      example:
        name: Luna
        gender: female
        birthDate: 2021-03-10
        type: breeder
        sireName: "Ch. Silver Moon"
        damName: "Lady Bella"

    CatUpdate:
      allOf:
        - $ref: "#/components/schemas/Cat"

    Photo:
      type: object
      properties:
        id: { type: integer }
        catId: { type: integer }
        url: { type: string }
        publicId: { type: string, nullable: true }
        cover: { type: boolean }
        position: { type: integer }

    PhotoUpdate:
      type: object
      properties:
        url: { type: string }
        cover: { type: boolean }
        position: { type: integer }
